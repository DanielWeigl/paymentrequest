Task list for implementing PaymentRequest/etc

SERVER SIDE:

DONE: 1. Create command-line, intended-to-run-on-a-web-server merchant tool
  that creates PaymentRequest messages: paymentrequest-create

Arguments:
  --paytoaddress=BTC_ADDRESS
  --amount=BTC (e.g. 1.0)
  --certificates=path/to/certleaf.pem,path/to/certintermediate.pem
  --privatekey=path/to/key.pem
  --memo="message"
  --expires=timestamp
  --receipt_url=URL
  --single_use
  --out=path_to_file

--certificates is the certificate chain, farthest-from-root first.
--privatekey must be the key used by the first --certificate.
--out defaults to stdout

See https://gist.github.com/4120476 for a description of the other arguments.

DONE: 2. Create a command-line tools for debugging/testing:
  "paymentrequest-dump"

3. Create a testing website that generates -testnet SignedPaymentRequests signed
  by a valid certificate (allow user to choose paytoaddress/amount/etc).

4. Modify testing website so it will generate invalid SignedPaymentRequests
  Conditions:
    Self-signed
    Expired leaf certificate
    Valid-certificates but expired PaymentRequest    
    Invalid signature
    ??? what else ???  UTF-8 tricks with the common name? (e.g. attacker^H^H^H^H^H^H^H^Hamazon.com )
      Is that taken care of by the root CA ?

5. Add to testing website to support a payment_url that generates PaymentACK messages:
  + Add an id number to generated PaymentRequests, add to PaymentRequest.merchant_data
    and store them as they're generated
  + Handle Payment messages submitted to payment_url:
    get id from merchant_data, lookup associated PaymentRequest
    if already paid: goto Something Wrong
    Check if Payment.transactions satisifes the PaymentRequest:
     if yes, submit raw transactions via a running bitcoind, return PaymentACK.accepted=true
    Something Wrong: return PaymentAck.accepted=false

  TEST: hand-generated Payments that do/do not satisy a PaymentRequest.

6. Add "always accept" URL to testing website:
  + Submits transactions to local, running -testnet bitcoind
  + If transactions OK: return PaymentACK.accepted=true
  + Else: return PaymentAck.accepted=false


7. Maybe more features for paymentrequest-create :
  + Password-protected .pem private key files ?
    (do web servers allow? How do they store the password?)

CLIENT SIDE

1. DONE:  Rework Bitcoin-Qt bitcoin: URI handling to use QLocalSocket instead of the flaky
   boost::interprocess mechanism.
     see https://github.com/bitcoin/bitcoin/pull/2299/

2. Teach Bitcoin-Qt to handle application/x-bitcoin-payment-request MIME type:
  + Add protobuf library as dependency to .pro file, doc/build-*.txt, gitian dependencies, etc.
  + Add set of root certificates to tree, read at startup, config option to read from
    somewhere else.
  + Display Send dialog with info from PaymentRequest

 TEST: feed valid/invalid SignedPaymentRequests via command line (make these unit tests?)

3. Modify installers to:
  register Bitcoin-Qt as x-bitcoin-payment-request handler
  put root certificates .pem  where Bitcoin-Qt will look for it at startup

 TEST: clean install, running -testnet, click on both ordinary links (that
   produce application/x-bitcoin-payment-request content)
   
4. Teach Bitcoin-Qt the extended bitcoin: URI syntax:
  + if payment_url given, fetch payment-request file, send it to
    running Bitcoin-Qt

  TEST: clean install, running -testnet, click on extended bitcoin: links and
    complete payments.

5. Teach Bitcoin-Qt to create and submit Payment messages when given
  a PaymentRequest with a payment_url:
  + Do not broadcast if payment_url is specified
  + Code to POST to a TLS-protected url (let user know if ERROR)
  + Code to parse response and show PaymentACK.memo

 TEST: success and failure cases.
